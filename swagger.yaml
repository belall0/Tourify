openapi: 3.0.0
info:
  title: Tourify
  description: Tourify is a RESTful API designed for multi-operator tour management
  version: 1.0.0
  contact:
    name: Belal Muhammad
    email: belallmuhammad0@gmail.com
servers:
  - url: https://tourify.belalmuhammad.me/
    description: Production server
  - url: https://localhost:443
    description: Production server

paths:
  # AUTHENTICATION
  /api/auth/signup:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Registers a new user, creating their account with provided details including name, email, password, role, and photo, and sending a confirmation email.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required: [name, email, password, role]
              allOf:
                - $ref: '#/components/schemas/UserRequest'
                - type: object
                  properties:
                    password:
                      type: string
                      description: The user's password
                      example: securePassword123
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Thanks for signing up! Please check your email (including spam) to activate your account. you have 10 minutes to verify your email.
        400:
          description: Missing Value or Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: 1) Please provide a valid email
        409:
          description: Conflict, user already exists with this email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: "Duplicate value for email: 'belallmuhammad0@gmail.com'"
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/auth/verify-email:
    post:
      tags: [Authentication]
      summary: Verify user's email
      description: Verifies a user's email address using a token sent via email. Upon successful verification, the user's email is marked as verified in the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, verificationCode]
              properties:
                email:
                  type: string
                  description: Your email must be associated with a verification code sent to your email
                  example: belallmuhammad0@gmail.com
                verificationCode:
                  type: string
                  description: Verification code sent to your email
                  example: 123456
      responses:
        200:
          description: Email verified successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "jwt=afsd; path='/' ; httpOnly"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  message:
                    type: string
                    example: Email verified successfully
        400:
          description: Missing or invalid input, expired verification code, and user not found with this email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please provide email and verification code!
              examples:
                Missing or invalid input:
                  value:
                    status: fail
                    message: Please provide email and verification code!
                Invalid or expired verification code:
                  value:
                    status: fail
                    message: Invalid or expired verification code
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/auth/resend-verification:
    post:
      tags: [Authentication]
      summary: Resend verification email
      description: Resend verification email to the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  description: Your email must be valid as a verification email will be sent.
                  example: belallmuhammad0@gmail.com
      responses:
        200:
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Verification code sent to email. you have 10 minutes to verify your email
        400:
          description: email not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: 'Please provide email!'
        404:
          description: unverified user not found with this email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: 'No unverified user found with this email address'
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/auth/login:
    post:
      tags: [Authentication]
      summary: Login user
      description: Login user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [email, password]
              type: object
              properties:
                email:
                  type: string
                  description: Your email must be valid
                  example: belallmuhammad0@gmail.com
                password:
                  type: string
                  description: Password must be at least 8 characters long
                  example: securePassword123

      responses:
        200:
          description: User logged in successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "jwt=afsd; path='/' ; httpOnly"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  message:
                    type: string
                    example: Logged in successfully
        400:
          description: Email or password are missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please provide email and password!
        401:
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Invalid email or password
        403:
          description: User not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please verify your email to login
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      description: Logout user and clear the cookie

      responses:
        200:
          description: User logged out successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "jwt=loggedout; path='/' ; httpOnly"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Logged out successfully

        401:
          $ref: '#/components/responses/AuthenticationError'
  /api/auth/forgot-password:
    post:
      tags: [Authentication]
      summary: Forgot password
      description: Send a reset password link to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [email]
              type: object
              properties:
                email:
                  type: string
                  description: Your email must be valid
                  example: belallmuhammad0@gmail.com
      responses:
        200:
          description: Reset password link sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Password reset token sent to email successfully, You have 10 minutes to reset your password
        400:
          description: email not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please provide an email address
        404:
          description: Not found, user not found with this email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: No user found with this email address
  /api/auth/reset-password/{token}:
    put:
      tags: [Authentication]
      summary: Reset password
      description: take the newPassword, and resetToken from the user and reset his/her password
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: Reset password token sent to your email

      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [newPassword]
              type: object
              properties:
                newPassword:
                  type: string
                  description: Password must be at least 8 characters long
                  example: 12345678

      responses:
        200:
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  message:
                    type: string
                    example: Password reset successfully

        400:
          description: newPassword not provided or invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: newPassword is required
              examples:
                newPassword not provided:
                  value:
                    status: fail
                    message: newPassword is required
                invalid token:
                  value:
                    status: fail
                    message: Token is invalid or has expired
        404:
          description: no user found with this token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token is invalid or has expired
  # PROFILE
  /api/users/me:
    get:
      tags: [Profile]
      summary: Get user profile
      description: Get the profile of the currently logged in user
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      user:
                        $ref: '#/components/schemas/UserResponse'
        401:
          $ref: '#/components/responses/AuthenticationError'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [Profile]
      summary: Update user profile
      description: Update the profile of the currently logged in user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: User profile updated successfully
          content:
            application/json:
              schema:
                oneOf:
                  # User did not update email
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      user:
                        $ref: '#/components/schemas/UserResponse'
                      message:
                        type: string
                        example: User profile updated successfully
                  # User updated email
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success

                      message:
                        type: string
                        example: Your profile has been updated. Please verify your new email to continue.
              examples:
                'No Email Update': # Name for the first scenario
                  value:
                    status: success
                    user:
                      _id: 6778d5f71f7832516ea4db9b
                      name: Belal Muhammad
                      email: belallmuhammad0@gmail.com
                      role: customer
                      photoUrl: https://res.cloudinary.com/dnjmqmbcb/image/upload/v1735521771/default_m4q3fx.jpg
                'Email Updated': # Name for the second scenario
                  value:
                    status: success
                    message: Your profile has been updated. Please verify your new email to continue.
        400:
          description: Missing Value or Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please provide a valid email
              examples:
                Update password:
                  value:
                    status: fail
                    message: This route is not for password updates. Please use /api/users/me/password route.
                No valid fields to update:
                  value:
                    status: fail
                    message: No valid fields to update
                Duplicate email:
                  value:
                    status: fail
                    message: "Duplicate value for email: belallmuhammad0'"
        401:
          $ref: '#/components/responses/AuthenticationError'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Profile]
      summary: Delete user profile
      description: Delete the profile of the currently logged in user
      responses:
        200:
          description: User profile deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User profile deleted successfully
        401:
          $ref: '#/components/responses/AuthenticationError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/users/me/password:
    put:
      tags: [Profile]
      summary: Update user password
      description: Update the password of the currently logged in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [currentPassword, newPassword]
              type: object
              properties:
                currentPassword:
                  type: string
                  description: Your current password
                  example: securePassword123
                newPassword:
                  type: string
                  description: Your new password
                  example: newSecurePassword123
      responses:
        200:
          description: User password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  message:
                    type: string
                    example: Password updated successfully
        400:
          description: Missing Value or Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please provide a valid email
              examples:
                No valid fields to update:
                  value:
                    status: fail
                    message: Please provide your current password along with the new password.
                Invalid current password:
                  value:
                    status: fail
                    message: Invalid current password
        401:
          $ref: '#/components/responses/AuthenticationError'
        500:
          $ref: '#/components/responses/InternalServerError'
  # TOURS
  /api/tours:
    post:
      tags: [Tours]
      summary: Create a new tour
      description: Create a new tour with provided details including name, duration, maxGroupSize, difficulty, price, and description, only for operators
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tourRequest'
      responses:
        201:
          description: Tour created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/tourResponse'
        401:
          $ref: '#/components/responses/AuthenticationError'
        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags: [Tours]
      summary: Get all tours
      description: Get all tours
      responses:
        200:
          description: Tours retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/tourResponse'
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/users/me/tours:
    get:
      tags: [Tours]
      summary: Get all tours created by the currently logged in operator
      description: Get all tours created by the currently logged in operator
      responses:
        200:
          description: Tours retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/tourResponse'
        401:
          $ref: '#/components/responses/AuthenticationError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/tours/{id}:
    get:
      tags: [Tours]
      summary: Get a tour
      description: Get a tour by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the tour to retrieve
      responses:
        200:
          description: Tour retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/tourResponse'
        404:
          description: Tour not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: No tour found with this ID
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [Tours]
      summary: Update a tour
      description: Update a tour with provided details including name, duration, maxGroupSize, difficulty, price, and description, only for operators, and only for tours created by the operator
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the tour to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tourRequest'
      responses:
        200:
          description: Tour updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/tourResponse'
        401:
          allOf:
            - $ref: '#/components/responses/AuthenticationError'
            - $ref: '#/components/responses/AuthorizationError'
        404:
          description: Tour not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: No tour found with this ID

        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Tours]
      summary: Delete a tour
      description: Delete a tour, only for operators, and only for tours created by the operator
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the tour to delete
      responses:
        200:
          description: Tour deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Tour deleted successfully
        401:
          allOf:
            - $ref: '#/components/responses/AuthenticationError'
            - $ref: '#/components/responses/AuthorizationError'
        404:
          description: Tour not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: No tour found with this ID

        500:
          $ref: '#/components/responses/InternalServerError'
  # BOOKINGS
  /api/tours/{id}/bookings:
    post:
      tags: [Bookings]
      summary: Book a tour
      description: Book a tour with provided details including slots, and total price, only for customers
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the tour to book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [slots]
              properties:
                slots:
                  type: number
                  description: The number of slots to book
                  example: 2
      responses:
        201:
          description: Tour booked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/completeBooking'
        400:
          description: Missing Value or Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please provide a valid number of slots
              examples:
                No valid fields to update:
                  value:
                    status: fail
                    message: Please provide the number of slots
                Invalid slots:
                  value:
                    status: fail
                    message: Slots must be at least 1
        401:
          $ref: '#/components/responses/AuthenticationError'
        404:
          $ref: '#/components/responses/NoTourFound'
        409:
          description: Not enough slots available
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Not enough slots available
        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags: [Bookings]
      summary: Get all bookings for a tour
      description: Get all bookings for a tour
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the tour to get bookings for
      responses:
        200:
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  count:
                    type: number
                    example: 2
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/tourBooking'
        404:
          $ref: '#/components/responses/NoTourFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/bookings/{id}:
    put:
      tags: [Bookings]
      summary: Update a booking
      description: Update a booking with provided details, only for the user who created the booking
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the booking to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [slots]
              properties:
                slots:
                  type: number
                  description: The number of slots to book
                  example: 2
      responses:
        200:
          description: Booking updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/myBooking'
        400:
          description: Missing Value or Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please provide a valid number of slots
              examples:
                No valid fields to update:
                  value:
                    status: fail
                    message: Please provide the number of slots
                Invalid slots:
                  value:
                    status: fail
                    message: Slots must be at least 1
        401:
          $ref: '#/components/responses/AuthenticationError'
        404:
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: No booking found with this ID
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Bookings]
      summary: Delete a booking
      description: Delete a booking, only for the user who created the booking
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the booking to delete
      responses:
        200:
          description: Booking deleted successfully
        401:
          $ref: '#/components/responses/AuthenticationError'
        404:
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: No booking found with this ID
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/users/me/bookings:
    get:
      tags: [Bookings]
      summary: Get all bookings created by the currently logged in user
      description: Get all bookings created by the currently logged in user
      responses:
        200:
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/myBooking'
        401:
          $ref: '#/components/responses/AuthenticationError'
        500:
          $ref: '#/components/responses/InternalServerError'
  # REVIEWS
  /api/tours/{id}/reviews:
    post:
      tags: [Reviews]
      summary: Create a review for a tour
      description: Create a review for a tour with provided details and customer must book the tour to review it
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the tour to review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rating]
              properties:
                review:
                  type: string
                  description: Your review must be at least 10 characters long
                  example: This tour was amazing
                rating:
                  type: number
                  description: Your rating must be between 1 and 5
                  example: 5
      responses:
        201:
          description: Review created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/completeReview'
        400:
          description: Missing Value or Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please provide a valid review
              examples:
                No valid fields to update:
                  value:
                    status: fail
                    message: Please provide a review and rating
                Invalid rating:
                  value:
                    status: fail
                    message: Rating must be between 1 and 5
                No booking found:
                  value:
                    status: fail
                    message: You have to book the tour first to be able to review it
        401:
          $ref: '#/components/responses/AuthenticationError'
        404:
          $ref: '#/components/responses/NoTourFound'
        409:
          description: Review already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: You already reviewed this tour
        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags: [Reviews]
      summary: Get all reviews for a tour
      description: Get all reviews for a tour
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the tour to get reviews for
      responses:
        200:
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  count:
                    type: number
                    example: 2
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/tourReview'
        404:
          $ref: '#/components/responses/NoTourFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/reviews/{id}:
    put:
      tags: [Reviews]
      summary: Update a review
      description: Update a review with provided details, only for the user who created the review
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the review to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rating]
              properties:
                review:
                  type: string
                  description: Your review must be at least 10 characters long
                  example: This tour was amazing
                rating:
                  type: number
                  description: Your rating must be between 1 and 5
                  example: 5
      responses:
        200:
          description: Review updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/completeReview'
        400:
          description: Missing Value or Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please provide a valid review
              examples:
                No valid fields to update:
                  value:
                    status: fail
                    message: Please provide a review and rating
                Invalid rating:
                  value:
                    status: fail
                    message: Rating must be between 1 and 5
        401:
          $ref: '#/components/responses/AuthenticationError'
        404:
          description: Review not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: No review found with this ID
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Reviews]
      summary: Delete a review
      description: Delete a review, only for the user who created the review
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the review to delete
      responses:
        200:
          description: Review deleted successfully

        401:
          $ref: '#/components/responses/AuthenticationError'
        404:
          description: Review not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: No review found with this ID
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/users/me/reviews:
    get:
      tags: [Reviews]
      summary: Get all reviews created by the currently logged in user
      description: Get all reviews created by the currently logged in user
      responses:
        200:
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  count:
                    type: number
                    example: 2
                  data:
                    type: object
                    properties:
                      reviews:
                        type: array
                        items:
                          $ref: '#/components/schemas/MyReview'

        401:
          $ref: '#/components/responses/AuthenticationError'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  schemas:
    UserRequest:
      type: object
      properties:
        name:
          type: string
          description: The user's full name
          example: Belal Muhammad
        email:
          type: string
          format: email
          description: The user's email address, Your email must be valid as a verification code will be sent.
          example: belallmuhammad0@gmail.com
        role:
          type: string
          enum: [customer, operator]
          description: The user's role, must be either customer or operator
          example: customer
        photo:
          type: string
          format: binary # Or you could use a string with a format like 'url' or 'base64'
          description: The user's profile photo (file upload)
    UserResponse:
      type: object
      properties:
        _id:
          type: string
          example: 5f5b7b3b7f6f6b0017f7f6f6
        name:
          type: string
          example: Belal Muhammad
        email:
          type: string
          example: belallmuhammad0@gmail.com
        role:
          type: string
          example: customer
        photoUrl:
          type: string
          example: https://res.cloudinary.com/dnjmqmbcb/image/upload/v1735521771/default_m4q3fx.jpg
    tourRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the tour
          example: The Great Tour
        duration:
          type: number
          description: The duration of the tour in days
          example: 5
        maxGroupSize:
          type: number
          description: The maximum group size for the tour
          example: 10
        difficulty:
          type: string
          enum: [easy, medium, difficult]
          description: The difficulty level of the tour
          example: medium
        price:
          type: number
          description: The price of the tour
          example: 500
        description:
          type: string
          description: A detailed description of the tour
          example: This tour is great for everyone
    tourResponse:
      type: object
      properties:
        _id:
          type: string
          example: 677a5521f1b1378003c319ac
        ownerId:
          type: string
          example: 5f5b7b3b7f6f6b0017f7f6f6
        name:
          type: string
          example: The Great Tour
        duration:
          type: number
          example: 5
        maxGroupSize:
          type: number
          example: 10
        difficulty:
          type: string
          example: medium
        price:
          type: number
          example: 500
        description:
          type: string
          example: This tour is great for everyone
    completeBooking:
      type: object
      properties:
        bookingId:
          type: string
          example: 677a5521f1b1378003c319ac
        tourId:
          type: string
          example: 577a5521f1b1378003c319ae
        tourName:
          type: string
          example: The Great Tour
        userId:
          type: string
          example: 5f5b7b3b7f6f6b0017f7f6f6
        userName:
          type: string
          example: Belal Muhammad
        slots:
          type: number
          example: 2
        totalPrice:
          type: number
          example: 1000
    myBooking:
      type: object
      properties:
        bookingId:
          type: string
          example: 677a5521f1b1378003c319ac
        tourId:
          type: string
          example: 577a5521f1b1378003c319ae
        tourName:
          type: string
          example: The Great Tour
        slots:
          type: number
          example: 2
        totalPrice:
          type: number
          example: 1000
    tourBooking:
      type: object
      properties:
        bookingId:
          type: string
          example: 677a5521f1b1378003c319ac
        userId:
          type: string
          example: 5f5b7b3b7f6f6b0017f7f6f6
        userName:
          type: string
          example: Belal Muhammad
        slots:
          type: number
          example: 2
        totalPrice:
          type: number
          example: 1000
    completeReview:
      type: object
      properties:
        reviewId:
          type: string
          example: 677a5521f1b1378003c319ac
        tourId:
          type: string
          example: 577a5521f1b1378003c319ae
        tourName:
          type: string
          example: The Great Tour
        userId:
          type: string
          example: 5f5b7b3b7f6f6b0017f7f6f6
        userName:
          type: string
          example: Belal Muhammad
        rating:
          type: number
          example: 5
        review:
          type: string
          example: This tour was amazing
    tourReview:
      type: object
      properties:
        reviewId:
          type: string
          example: 677a5521f1b1378003c319ac
        name:
          type: string
          example: Belal Muhammad
        review:
          type: string
          example: This tour was amazing
        rating:
          type: number
          example: 5
    MyReview:
      type: object
      properties:
        reviewId:
          type: string
          example: 677a5521f1b1378003c319ac
        tourId:
          type: string
          example: 577a5521f1b1378003c319ae
        tourName:
          type: string
          example: The Great Tour
        rating:
          type: number
          example: 5
        review:
          type: string
          example: This tour was amazing

  #-------------------------------
  # Reusable responses
  #-------------------------------
  responses:
    AuthenticationError:
      description: Authentication failed for various reasons
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Authentication failed
          examples:
            Access token is missing:
              value:
                status: fail
                message: You are not logged in. Please log in to access this route
            Access token is invalid:
              value:
                status: fail
                message: Invalid token. Please log in again
            Access token has expired:
              value:
                status: fail
                message: Your token has expired. Please log in again
            User not found:
              value:
                status: fail
                message: The user belonging to this token no longer exists
            Password changed:
              value:
                status: fail
                message: User recently changed password. Please log in again.
    AuthorizationError:
      description: Authorization failed for various reasons
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Authorization failed
          examples:
            permission denied:
              value:
                status: fail
                message: You do not have permission to perform this action
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: error
              message:
                type: string
                example: 'Internal server error, please try again later'
    NoTourFound:
      description: No tour found with this ID
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: No tour found with this ID

  securitySchemes:
    Authentication:
      type: https
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: jwt

security:
  - cookieAuth: []
