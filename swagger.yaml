openapi: 3.0.0
info:
  title: Tourify
  description: Tourify is a RESTful API designed for multi-operator tour management
  version: 1.0.0
  contact:
    name: Belal Muhammad
    email: belallmuhammad0@gmail.com
servers:
  - url: http://localhost:3000
    description: Development server

paths:
  /api/auth/signup:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Registers a new user, creating their account with provided details including name, email, password, role, and photo, and sending a confirmation email.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required: [name, email, password, role]
              allOf:
                - $ref: '#/components/schemas/User'
                - type: object
                  properties:
                    password:
                      type: string
                      description: The user's password
                      example: securePassword123
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Thanks for signing up! Please check your email (including spam) to activate your account. you have 10 minutes to verify your email.
        400:
          description: Missing Value or Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: 1) Please provide a valid email
        409:
          description: Conflict, user already exists with this email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: "Duplicate value for email: 'belallmuhammad0@gmail.com'"
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/auth/verify-email:
    post:
      tags: [Authentication]
      summary: Verify user's email
      description: Verifies a user's email address using a token sent via email. Upon successful verification, the user's email is marked as verified in the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, verificationCode]
              properties:
                email:
                  type: string
                  description: Your email must be associated with a verification code sent to your email
                  example: belallmuhammad0@gmail.com
                verificationCode:
                  type: string
                  description: Verification code sent to your email
                  example: 123456
      responses:
        200:
          description: Email verified successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "jwt=afsd; path='/' ; httpOnly"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  message:
                    type: string
                    example: Email verified successfully
        400:
          description: Missing or invalid input, expired verification code, and user not found with this email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please provide email and verification code!
              examples:
                Missing or invalid input:
                  value:
                    status: fail
                    message: Please provide email and verification code!
                Invalid or expired verification code:
                  value:
                    status: fail
                    message: Invalid or expired verification code
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/auth/resend-verification:
    post:
      tags: [Authentication]
      summary: Resend verification email
      description: Resend verification email to the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  description: Your email must be valid as a verification email will be sent.
                  example: belallmuhammad0@gmail.com
      responses:
        200:
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Verification code sent to email. you have 10 minutes to verify your email
        400:
          description: email not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: 'Please provide email!'
        404:
          description: unverified user not found with this email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: 'No unverified user found with this email address'
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/auth/login:
    post:
      tags: [Authentication]
      summary: Login user
      description: Login user with email and password

      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [email, password]
              type: object
              properties:
                email:
                  type: string
                  description: Your email must be valid
                  example: belallmuhammad0@gmail.com
                password:
                  type: string
                  description: Password must be at least 8 characters long
                  example: securePassword123

      responses:
        200:
          description: User logged in successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "jwt=afsd; path='/' ; httpOnly"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  message:
                    type: string
                    example: Logged in successfully
        400:
          description: Email or password are missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please provide email and password!
        401:
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Invalid email or password
        403:
          description: User not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please verify your email to login
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      description: Logout user and clear the cookie

      responses:
        200:
          description: User logged out successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "jwt=loggedout; path='/' ; httpOnly"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Logged out successfully

        401:
          $ref: '#/components/responses/AuthenticationError'
  /api/auth/forgot-password:
    post:
      tags: [Authentication]
      summary: Forgot password
      description: Send a reset password link to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [email]
              type: object
              properties:
                email:
                  type: string
                  description: Your email must be valid
                  example: belallmuhammad0@gmail.com
      responses:
        200:
          description: Reset password link sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Password reset token sent to email successfully, You have 10 minutes to reset your password
        400:
          description: email not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Please provide an email address
        404:
          description: Not found, user not found with this email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: No user found with this email address
  /api/auth/reset-password/{token}:
    put:
      tags: [Authentication]
      summary: Reset password
      description: take the newPassword, and resetToken from the user and reset his/her password
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: Reset password token sent to your email

      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [newPassword]
              type: object
              properties:
                newPassword:
                  type: string
                  description: Password must be at least 8 characters long
                  example: 12345678

      responses:
        200:
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  message:
                    type: string
                    example: Password reset successfully

        400:
          description: newPassword not provided or invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: newPassword is required
              examples:
                newPassword not provided:
                  value:
                    status: fail
                    message: newPassword is required
                invalid token:
                  value:
                    status: fail
                    message: Token is invalid or has expired
        404:
          description: no user found with this token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token is invalid or has expired

components:
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  schemas:
    User:
      type: object
      required: [name, email, password, role]
      properties:
        name:
          type: string
          description: The user's full name
          example: Belal Muhammad
        email:
          type: string
          format: email
          description: The user's email address, Your email must be valid as a verification code will be sent.
          example: belallmuhammad0@gmail.com
        role:
          type: string
          enum: [customer, operator]
          description: The user's role, must be either customer or operator
          example: customer
        photo:
          type: string
          format: binary # Or you could use a string with a format like 'url' or 'base64'
          description: The user's profile photo (file upload)
  #-------------------------------
  # Reusable responses
  #-------------------------------
  responses:
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: error
              message:
                type: string
                example: 'Internal server error, please try again later'
    AuthenticationError:
      description: Authentication failed for various reasons
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Authentication failed
          examples:
            Access token is missing:
              value:
                status: fail
                message: You are not logged in. Please log in to access this route
            Access token is invalid:
              value:
                status: fail
                message: Invalid token. Please log in again
            Access token has expired:
              value:
                status: fail
                message: Your token has expired. Please log in again
            User not found:
              value:
                status: fail
                message: The user belonging to this token no longer exists
            Password changed:
              value:
                status: fail
                message: User recently changed password. Please log in again.
  securitySchemes:
    Authentication:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - Authentication: []
